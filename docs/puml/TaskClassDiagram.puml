@startuml
skinparam package {
  BackgroundColor<<Backend>> #FFEEEE
  BackgroundColor<<Types>> #EEFFEE
}

package "Backend" <<Backend>> {
  class FlaskApp {
    + get_tasks(): Response
    + add_task(): Response
    + delete_task(task_id: number): Response
    + update_task(task_id: number): Response
    + update_task_order(): Response
    + sort_tasks_by_due_date(): Response
    + delete_completed_tasks(): Response
    + get_tasks_by_due_date(): Response
  }
}
@enduml

@startuml
skinparam package {
  BackgroundColor<<Types>> #EEFFEE
}

package "Types" <<Types>> {
  class TaskState {
    - tasks: Task[]
    - currentEditTask: Task
    - currentEditTaskIndex: number
    - isEditModalVisible: boolean
    - currentPage: number
    - tasksPerPage: number
    - newTask: string
    - newTaskDetails: string
    - selectedTasks: number[]
    - selectedTask: Task
    - paginatedTasks: Task[]
  }

  class Task {
    - id: number
    - text: string
    - completed: boolean
    - dueDate: string
    - details: string
    - order: number
  }

  TaskState *-- Task
}
@enduml

@startuml
skinparam package {
  BackgroundColor<<Composables>> #EEEEFF
}

package "Composables" <<Composables>> {
  class useTasks {
    + loadTasks(): void
    + fetchTasksByDueDate(dueDate: string): void
  }

  class useTaskPagination {
    + paginatedTasks: Task[]
    + totalPages: number
  }

  class useTaskOperations {
    + addTask(): void
    + removeSelectedTasks(): void
    + clearInput(): void
  }

  class useTaskNotification {
    + showToastMessage(message: string, type: string): void
  }

  class useTaskEdit {
    + openEditModal(index: number): void
    + closeEditModal(): void
    + saveEditTask(): void
  }

  class useTaskDragDrop {
    + onDragStart(index: number): void
    + onDragOver(index: number): void
    + onDrop(index: number): void
  }

  useTasks --> useTaskPagination
  useTasks --> useTaskOperations
  useTaskOperations --> useTaskNotification
  useTaskEdit --> useTaskDragDrop
}
@enduml

@startuml
skinparam package {
  BackgroundColor<<Backend>> #FFEEEE
  BackgroundColor<<Types>> #EEFFEE
  BackgroundColor<<Composables>> #EEEEFF
}

package "Backend" <<Backend>> {
  class FlaskApp
}

package "Types" <<Types>> {
  class TaskState
  class Task
  TaskState *-- Task
}

package "Composables" <<Composables>> {
  class useTasks
  class useTaskPagination
  class useTaskOperations
  class useTaskNotification
  class useTaskEdit
  class useTaskDragDrop
}

FlaskApp <|-- TaskState
useTasks --> TaskState
useTaskPagination --> TaskState
useTaskOperations --> TaskState
useTaskNotification --> TaskState
useTaskEdit --> TaskState
useTaskDragDrop --> TaskState
@enduml
