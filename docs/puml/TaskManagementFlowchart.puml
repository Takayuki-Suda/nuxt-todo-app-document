@startuml 
skinparam monochrome false
skinparam shadowing false
skinparam roundcorner 20

start
:新しいタスクを入力;
if (タスクが空？) then (yes)
  :何もしない;
  stop
else (no)
  :タスク追加;
  :サーバーにタスク追加リクエストを送信;
  -> サーバーAPI : HTTP POST
  :APIレスポンス処理;
  if (レスポンスが正常？) then (yes)
    :UI更新 (タスク追加);
    :成功メッセージを表示;
  else (no)
    :エラーメッセージを表示;
    :エラーログ記録;
    note right
      エラーコード、メッセージ、
      リクエストパラメータを記録
    end note
    :再試行オプション表示;
  endif
endif

:タスク削除;
:サーバーにタスク削除リクエストを送信;
-> サーバーAPI : HTTP DELETE
:APIレスポンス処理;
if (レスポンスが正常？) then (yes)
  :UI更新 (タスク削除);
  :成功メッセージを表示;
else (no)
  :エラーメッセージを表示;
  :エラーログ記録;
  note right
    エラーコード、メッセージ、
    リクエストパラメータを記録
  end note
  :再試行オプション表示;
endif

:タスク編集;
:サーバーにタスク編集リクエストを送信;
-> サーバーAPI : HTTP PUT
:APIレスポンス処理;
if (レスポンスが正常？) then (yes)
  :UI更新 (タスク編集);
  :成功メッセージを表示;
else (no)
  :エラーメッセージを表示;
  :エラーログ記録;
  note right
    エラーコード、メッセージ、
    リクエストパラメータを記録
  end note
  :再試行オプション表示;
endif

:タスク順序更新;
:サーバーに順序更新リクエストを送信;
-> サーバーAPI : HTTP PUT
:APIレスポンス処理;
if (レスポンスが正常？) then (yes)
  :UI更新 (順序更新);
  :成功メッセージを表示;
else (no)
  :エラーメッセージを表示;
  :エラーログ記録;
  note right
    エラーコード、メッセージ、
    リクエストパラメータを記録
  end note
  :再試行オプション表示;
endif

:期限順に並べ替え;
:サーバーに並べ替えリクエストを送信;
-> サーバーAPI : HTTP PUT
:APIレスポンス処理;
if (レスポンスが正常？) then (yes)
  :UI更新 (タスク並べ替え);
  :成功メッセージを表示;
else (no)
  :エラーメッセージを表示;
  :エラーログ記録;
  note right
    エラーコード、メッセージ、
    リクエストパラメータを記録
  end note
  :再試行オプション表示;
endif

:完了したタスク削除;
:サーバーに完了タスク削除リクエストを送信;
-> サーバーAPI : HTTP DELETE
:APIレスポンス処理;
if (レスポンスが正常？) then (yes)
  :UI更新 (完了タスク削除);
  :成功メッセージを表示;
else (no)
  :エラーメッセージを表示;
  :エラーログ記録;
  note right
    エラーコード、メッセージ、
    リクエストパラメータを記録
  end note
  :再試行オプション表示;
endif

:期限日でタスク取得;
:サーバーに期限日指定リクエストを送信;
-> サーバーAPI : HTTP GET
:APIレスポンス処理;
if (レスポンスが正常？) then (yes)
  :UI更新 (タスク取得);
  :成功メッセージを表示;
else (no)
  :エラーメッセージを表示;
  :エラーログ記録;
  note right
    エラーコード、メッセージ、
    リクエストパラメータを記録
  end note
  :再試行オプション表示;
endif

stop
@enduml
